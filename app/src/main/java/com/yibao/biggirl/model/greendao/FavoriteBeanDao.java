package com.yibao.biggirl.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yibao.biggirl.model.favorite.FavoriteBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_BEAN".
*/
public class FavoriteBeanDao extends AbstractDao<FavoriteBean, Long> {

    public static final String TABLENAME = "FAVORITE_BEAN";

    /**
     * Properties of entity FavoriteBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property GankId = new Property(2, String.class, "gankId", false, "GANK_ID");
        public final static Property ImagUrl = new Property(3, String.class, "imagUrl", false, "IMAG_URL");
        public final static Property Des = new Property(4, String.class, "des", false, "DES");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    }


    public FavoriteBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"GANK_ID\" TEXT," + // 2: gankId
                "\"IMAG_URL\" TEXT," + // 3: imagUrl
                "\"DES\" TEXT," + // 4: des
                "\"NAME\" TEXT," + // 5: name
                "\"TYPE\" TEXT," + // 6: type
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoriteBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        String gankId = entity.getGankId();
        if (gankId != null) {
            stmt.bindString(3, gankId);
        }
 
        String imagUrl = entity.getImagUrl();
        if (imagUrl != null) {
            stmt.bindString(4, imagUrl);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(5, des);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoriteBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        String gankId = entity.getGankId();
        if (gankId != null) {
            stmt.bindString(3, gankId);
        }
 
        String imagUrl = entity.getImagUrl();
        if (imagUrl != null) {
            stmt.bindString(4, imagUrl);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(5, des);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FavoriteBean readEntity(Cursor cursor, int offset) {
        FavoriteBean entity = new FavoriteBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gankId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imagUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // des
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoriteBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setGankId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImagUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDes(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FavoriteBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FavoriteBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FavoriteBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
